PHP Image Server

The image server will consist of the following elements:

404 handler
  The 404 handler will generate images on the fly based on the request that comes in. The
  request must consist of the ID of the image along with image and width and other information.
  A request might look like this: http://phpims/<hash key>/<width>/<height>. Once an image has
  been served the handler will place the actual file on disk so that the next request will go
  directly to the file

Crontab
  PHPIms will a crontab that deletes files that has not been accessed for a while or simply
  delete all images that was created x minutes/hours/days/weeks ago. This must be configurable.

REST API
  Users place the original images in the server by using a REST interface:

  GET     => Get images (via the 404 handler)
  PUT     => Place an original file on the server along with meta information
  DELETE  => Delete the original image or one of the generated variations
  POST    => Change a stored image. Can be used to manipulate metadata
  HEAD    => Fetches metadata about an image

PHP client
  A PHP client must be made available that supports all actions in the REST interface so
  developers can easily use phpims as a backend and simply using the client on the frontend.

Dashboard
  The server must also consist of a web based dashboard where used can browse the images stored
  on the server. Users can use this dashboard to manually upload images and manipulate metadata.

Metadata
  Some metadata should be used to categorize the images. The images belongs to a category tree.
  This is to make the dashboard easier to navigate. Instead of having one page with thousands of
  images we will have a category tree. Categories should be created as they come in alongside
  images and must be editable in the dashboard. Since the categories is not needed when GETing
  an image it does not really matter which category an image belongs to. It's purely for
  administrative purposes.

Config
  Different parts of the system must be highly configurable. For instance:
    Diskusage of the cached images
    How long they should stay on disk
    Wether or not versions of the origials should ever hit the disk (or delivered via the 404
    handler every time)
    Which storage backend to use
    Which cache component to use
    How much memory the cache component should be able to use
    Who should be able to use the REST interface (should be editable via the dashboard)

Search
  sphinx should be used to search all metadata on the server via the dashboard

Signed requests
  phpims should support the use of signed requests when generating images so people can not
  openly use the RESTful interface

PHPIMS will use MongoDB as a backend for the metadata and image information. The storage itself
should be made using a plugin architecture so that developers can make their own backends.
Storage backends that should be included by default is S3 (amazon) and FS (filesystem). Memcache
will be used as session storage for the dashboard part of the system, as well as caching of
metadata and other information. The cache layer should also be configurable. APC and Memcache
should work out of the box.